'use client';

import React, { useCallback, useEffect } from 'react';
import useEditorStore from '../store/editorStore';
import './index.css';
import PropertyPanel from './components/PropertyPanel';
import ComponentTreePanel from './components/ComponentTreePanel';
import TextComp from '../components/TextComp';
import { ComponentConfig, ComponentData } from '../common/types';
import { PicComp, WrapComp } from '../components';
import { eventBus } from '../utils/eventBus';
import Head from 'next/head';
import CanvasComponent from './components/CanvasComponent';
import ZoomControl from './components/ZoomControl';
import TextToolbar from './components/TextToolbar';
import { AddChildComponentData } from '../utils/messageBus';

const components: ComponentConfig[] = [TextComp, PicComp, WrapComp];

function Page() {
  const canvasWarperRef = React.useRef<HTMLDivElement>(null);
  const { setSelectedComponentId, addComponent, addComponentType, zoom, setZoom, reorderComponent } = useEditorStore((state) => state);

  useEffect(() => {
    components.forEach((comp) => {
      addComponentType(comp);
    });
  }, [addComponentType]);

  // 添加一个处理组件添加的公共函数
  const handleAddComponent = useCallback(
    (compName: string, parentId?: number) => {
      addComponent(compName, parentId);
    },
    [addComponent],
  );

  useEffect(() => {
    const handleAddComponentEvent = (data: { parentComponentId?: number; componentType: string; position: { x: number; y: number } }) => {
      // 处理从画布拖拽添加组件
      handleAddComponent(data.componentType, data.parentComponentId);
    };

    const handleAddChildComponentEvent = (data: AddChildComponentData) => {
      const addChildComponentData = data;
      if (addChildComponentData.parentComponentId !== undefined && addChildComponentData.componentId !== undefined) {
        const { parentComponentId, componentId } = addChildComponentData;
        // 添加组件到指定的父组件
        reorderComponent(componentId as number, parentComponentId as number);
      }
    };

    eventBus.on('addComponent', handleAddComponentEvent);

    eventBus.on('addChildComponent', handleAddChildComponentEvent);
    document.addEventListener(
      'wheel',
      function (event: WheelEvent) {
        if (!event.deltaY || !event.ctrlKey) {
          return;
        }
        event.preventDefault();
        const direction = event.deltaY > 0 ? 'zoomOut' : 'zoomIn';
        const step = 0.1;
        if (direction === 'zoomIn') {
          setZoom(Math.min(3, zoom + step));
        } else if (direction === 'zoomOut') {
          setZoom(Math.max(0.1, zoom - step));
        }
        return false;
      },
      { passive: false },
    );

    return () => {
      eventBus.off('addComponent', handleAddComponentEvent);
      eventBus.off('addChildComponent', handleAddChildComponentEvent);
    };
  }, [addComponent, handleAddComponent, zoom, setZoom]);

  const handleComponentSelect = useCallback(
    (component: ComponentData) => {
      setSelectedComponentId(component.id ?? -1);
    },
    [setSelectedComponentId],
  );

  const onUpdateStyle = useCallback((styleUpdates: Record<string, string>) => {
    const state = useEditorStore.getState();
    if (state.selectedComponentId !== null && state.selectedComponentId >= 0) {
      const component = state.componentTree[state.selectedComponentId];
      if (component && component.config?.compName === 'Text') {
        // Update style props in the store
        state.updateComponentStyleProps(state.selectedComponentId, styleUpdates);
      }
    }
  }, []);

  return (
    <div className="editor">
      <Head>
        <title>Next webm -- Editor</title>
        <meta name="description" content="Generated by Next webm -- Editor" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="navbar">顶部导航+工具栏</div>
      <div className="main-container">
        <div className="properties">
          <ComponentTreePanel />
        </div>

        <div className="canvas-container">
          <div
            className="canvas"
            style={{
              width: `${900 * zoom}px`,
              height: `${1600 * zoom}px`,
            }}
            ref={canvasWarperRef}
          >
            <CanvasComponent onComponentSelect={handleComponentSelect} />
          </div>
          <TextToolbar onUpdateStyle={onUpdateStyle} />
          <ZoomControl />
        </div>
        <div className="properties">
          <PropertyPanel />
        </div>
      </div>
    </div>
  );
}

export default Page;
